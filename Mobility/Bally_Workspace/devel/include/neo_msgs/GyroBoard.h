// Generated by gencpp from file neo_msgs/GyroBoard.msg
// DO NOT EDIT!


#ifndef NEO_MSGS_MESSAGE_GYROBOARD_H
#define NEO_MSGS_MESSAGE_GYROBOARD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace neo_msgs
{
template <class ContainerAllocator>
struct GyroBoard_
{
  typedef GyroBoard_<ContainerAllocator> Type;

  GyroBoard_()
    : acceleration()
    , orientation(0.0)  {
      acceleration.assign(0.0);
  }
  GyroBoard_(const ContainerAllocator& _alloc)
    : acceleration()
    , orientation(0.0)  {
  (void)_alloc;
      acceleration.assign(0.0);
  }



   typedef boost::array<double, 3>  _acceleration_type;
  _acceleration_type acceleration;

   typedef double _orientation_type;
  _orientation_type orientation;





  typedef boost::shared_ptr< ::neo_msgs::GyroBoard_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::neo_msgs::GyroBoard_<ContainerAllocator> const> ConstPtr;

}; // struct GyroBoard_

typedef ::neo_msgs::GyroBoard_<std::allocator<void> > GyroBoard;

typedef boost::shared_ptr< ::neo_msgs::GyroBoard > GyroBoardPtr;
typedef boost::shared_ptr< ::neo_msgs::GyroBoard const> GyroBoardConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::neo_msgs::GyroBoard_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::neo_msgs::GyroBoard_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace neo_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'neo_msgs': ['/home/bally/Bally_Workspace/src/neo_driver/neo_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::neo_msgs::GyroBoard_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::neo_msgs::GyroBoard_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::neo_msgs::GyroBoard_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::neo_msgs::GyroBoard_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::neo_msgs::GyroBoard_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::neo_msgs::GyroBoard_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::neo_msgs::GyroBoard_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2b635625b22ccc397d44e4cb7dac6a32";
  }

  static const char* value(const ::neo_msgs::GyroBoard_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2b635625b22ccc39ULL;
  static const uint64_t static_value2 = 0x7d44e4cb7dac6a32ULL;
};

template<class ContainerAllocator>
struct DataType< ::neo_msgs::GyroBoard_<ContainerAllocator> >
{
  static const char* value()
  {
    return "neo_msgs/GyroBoard";
  }

  static const char* value(const ::neo_msgs::GyroBoard_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::neo_msgs::GyroBoard_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[3] acceleration #acceleration along the 3 axis\n"
"float64 orientation #angle around the 3rd axe\n"
;
  }

  static const char* value(const ::neo_msgs::GyroBoard_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::neo_msgs::GyroBoard_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.acceleration);
      stream.next(m.orientation);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GyroBoard_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::neo_msgs::GyroBoard_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::neo_msgs::GyroBoard_<ContainerAllocator>& v)
  {
    s << indent << "acceleration[]" << std::endl;
    for (size_t i = 0; i < v.acceleration.size(); ++i)
    {
      s << indent << "  acceleration[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.acceleration[i]);
    }
    s << indent << "orientation: ";
    Printer<double>::stream(s, indent + "  ", v.orientation);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NEO_MSGS_MESSAGE_GYROBOARD_H
