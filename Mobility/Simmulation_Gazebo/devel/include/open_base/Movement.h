// Generated by gencpp from file open_base/Movement.msg
// DO NOT EDIT!


#ifndef OPEN_BASE_MESSAGE_MOVEMENT_H
#define OPEN_BASE_MESSAGE_MOVEMENT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <open_base/Velocity.h>
#include <open_base/MovementGeneric.h>
#include <open_base/MovementBezier.h>

namespace open_base
{
template <class ContainerAllocator>
struct Movement_
{
  typedef Movement_<ContainerAllocator> Type;

  Movement_()
    : movement(0)
    , wheel()
    , generic()
    , bezier()  {
    }
  Movement_(const ContainerAllocator& _alloc)
    : movement(0)
    , wheel(_alloc)
    , generic(_alloc)
    , bezier(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _movement_type;
  _movement_type movement;

   typedef  ::open_base::Velocity_<ContainerAllocator>  _wheel_type;
  _wheel_type wheel;

   typedef  ::open_base::MovementGeneric_<ContainerAllocator>  _generic_type;
  _generic_type generic;

   typedef  ::open_base::MovementBezier_<ContainerAllocator>  _bezier_type;
  _bezier_type bezier;



  enum {
    BEZIER = 0u,
    GENERIC = 1u,
    NONE = 2u,
    WHEEL = 3u,
    POSITION_ABSOLUTE = 0u,
    POSITION_RELATIVE = 1u,
    VELOCITY = 2u,
    HYBRID = 0u,
    MOBILE = 1u,
    MOBILE_RAW = 2u,
    WORLD = 3u,
  };


  typedef boost::shared_ptr< ::open_base::Movement_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::open_base::Movement_<ContainerAllocator> const> ConstPtr;

}; // struct Movement_

typedef ::open_base::Movement_<std::allocator<void> > Movement;

typedef boost::shared_ptr< ::open_base::Movement > MovementPtr;
typedef boost::shared_ptr< ::open_base::Movement const> MovementConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::open_base::Movement_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::open_base::Movement_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace open_base

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'open_base': ['/home/xprize/Bally_Workspace/src/OpenBase/ROS/open_base/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::open_base::Movement_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::open_base::Movement_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::open_base::Movement_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::open_base::Movement_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::open_base::Movement_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::open_base::Movement_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::open_base::Movement_<ContainerAllocator> >
{
  static const char* value()
  {
    return "68a9ba8e542ff32c2d272bc9497c5912";
  }

  static const char* value(const ::open_base::Movement_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x68a9ba8e542ff32cULL;
  static const uint64_t static_value2 = 0x2d272bc9497c5912ULL;
};

template<class ContainerAllocator>
struct DataType< ::open_base::Movement_<ContainerAllocator> >
{
  static const char* value()
  {
    return "open_base/Movement";
  }

  static const char* value(const ::open_base::Movement_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::open_base::Movement_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 movement\n"
"open_base/Velocity wheel\n"
"open_base/MovementGeneric generic\n"
"open_base/MovementBezier bezier\n"
"# movement constants\n"
"uint8 BEZIER=0\n"
"uint8 GENERIC=1\n"
"uint8 NONE=2\n"
"uint8 WHEEL=3\n"
"# type constants\n"
"uint8 POSITION_ABSOLUTE=0\n"
"uint8 POSITION_RELATIVE=1\n"
"uint8 VELOCITY=2\n"
"# frame constants\n"
"uint8 HYBRID=0\n"
"uint8 MOBILE=1\n"
"uint8 MOBILE_RAW=2\n"
"uint8 WORLD=3\n"
"\n"
"================================================================================\n"
"MSG: open_base/Velocity\n"
"float64 v_left\n"
"float64 v_back\n"
"float64 v_right\n"
"\n"
"================================================================================\n"
"MSG: open_base/MovementGeneric\n"
"uint8 type\n"
"uint8 frame\n"
"geometry_msgs/Pose2D target\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose2D\n"
"# Deprecated\n"
"# Please use the full 3D pose.\n"
"\n"
"# In general our recommendation is to use a full 3D representation of everything and for 2D specific applications make the appropriate projections into the plane for their calculations but optimally will preserve the 3D information during processing.\n"
"\n"
"# If we have parallel copies of 2D datatypes every UI and other pipeline will end up needing to have dual interfaces to plot everything. And you will end up with not being able to use 3D tools for 2D use cases even if they're completely valid, as you'd have to reimplement it with different inputs and outputs. It's not particularly hard to plot the 2D pose or compute the yaw error for the Pose message and there are already tools and libraries that can do this for you.\n"
"\n"
"\n"
"# This expresses a position and orientation on a 2D manifold.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 theta\n"
"\n"
"================================================================================\n"
"MSG: open_base/MovementBezier\n"
"uint8 frame\n"
"geometry_msgs/Pose2D[] targetTranslation\n"
"float64[] targetRotation\n"
"float64 step\n"
"bool offsetTraslation\n"
"bool offsetRotation\n"
;
  }

  static const char* value(const ::open_base::Movement_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::open_base::Movement_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.movement);
      stream.next(m.wheel);
      stream.next(m.generic);
      stream.next(m.bezier);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Movement_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::open_base::Movement_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::open_base::Movement_<ContainerAllocator>& v)
  {
    s << indent << "movement: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.movement);
    s << indent << "wheel: ";
    s << std::endl;
    Printer< ::open_base::Velocity_<ContainerAllocator> >::stream(s, indent + "  ", v.wheel);
    s << indent << "generic: ";
    s << std::endl;
    Printer< ::open_base::MovementGeneric_<ContainerAllocator> >::stream(s, indent + "  ", v.generic);
    s << indent << "bezier: ";
    s << std::endl;
    Printer< ::open_base::MovementBezier_<ContainerAllocator> >::stream(s, indent + "  ", v.bezier);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OPEN_BASE_MESSAGE_MOVEMENT_H
